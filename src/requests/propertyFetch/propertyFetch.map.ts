import { agents, branches, cards, propertyDetails } from "@/db/schema";
import { InferInsertModel } from "drizzle-orm";
import { Card, PropertyDetails } from "./propertyFetch.models";

export const getSchemaPropertyDetailsFromPropertyDetails = (id: string, details: PropertyDetails): InferInsertModel<typeof propertyDetails> => {
  const convertToNumber = (value: string | number): number => {
    return typeof value === 'string' ? parseFloat(value) : value;
  };

  return {
    id: id,
    address: details.address,
    displayAddress: details.display_address,
    coverImageUrl: details.cover_image_url,
    coverImageUrlSource: details.cover_image_url_source,
    listingImages: details.listing_images,
    googleStreetViewUrl: details.google_street_view_url,
    numBathrooms: convertToNumber(details.num_bathrooms),
    numBedrooms: convertToNumber(details.num_bedrooms),
    numCarSpaces: convertToNumber(details.num_car_spaces),
    latestBedrooms: details.latest_bedrooms,
    latestBathrooms: details.latest_bathrooms,
    latestCarSpaces: details.latest_car_spaces,
    latestSource: details.latest_source,
    headline: details.headline,
    estimatedValueRevisionDate: new Date(details.estimated_value_revision_date),
    displayEstimatedLowerValueShort: details.display_estimated_lower_value_short,
    displayEstimatedUpperValueShort: details.display_estimated_upper_value_short,
    displayEstimatedValueShort: details.display_estimated_value_short,
    estimatedRentalRevisionDate: new Date(details.estimated_rental_revision_date),
    displayEstimatedRentalLowerValueShort: details.display_estimated_rental_lower_value_short,
    displayEstimatedRentalUpperValueShort: details.display_estimated_rental_upper_value_short,
    estimatedRentalYield: details.estimated_rental_yield,
    capitalValue: convertToNumber(details.capital_value),
    improvementValue: convertToNumber(details.improvement_value),
    landValue: convertToNumber(details.land_value),
    displayCapitalValueShort: details.display_capital_value_short,
    displayImprovementValueShort: details.display_improvement_value_short,
    displayLandValueShort: details.display_land_value_short,
    currentRevisionDate: new Date(details.current_revision_date),
    firstGasEnabled: details.first_gas_enabled,
    flags: details.flags,
    cityId: details.city_id,
    suburbId: details.suburb_id,
    tmSuburbId: details.tm_suburb_id,
    tmRegionId: details.tm_region_id,
    tmDistrictId: details.tm_district_id,
    unitIdentifier: details.unit_identifier,
    streetNumber: details.street_number,
    streetAlpha: details.street_alpha,
    street: details.street,
    suburb: details.suburb,
    city: details.city,
    ta: details.ta,
    propertyId: details.property_id,
    decadeBuilt: details.decade_built,
    buildingConstruction: details.building_construction,
    buildingCondition: details.building_condition,
    floorArea: convertToNumber(details.floor_area),
    landArea: convertToNumber(details.land_area),
    hasDeck: details.has_deck,
    viewType: details.view_type,
    viewScope: details.view_scope,
    zone: details.zone,
    trees: details.trees,
    contour: details.contour,
    massTotalLivingArea: convertToNumber(details.mass_total_living_area),
    legalDescription: details.legal_description,
    categoryCode: details.category_code,
    certificateOfTitle: details.certificate_of_title,
    valuationReferenceNumber: details.valuation_reference_number,
    landUse: details.land_use,
    estimatedLowerValue: convertToNumber(details.estimated_lower_value),
    estimatedUpperValue: convertToNumber(details.estimated_upper_value),
    estimatedValue: convertToNumber(details.estimated_value),
    estimatedRentalLowerValue: convertToNumber(details.estimated_rental_lower_value),
    estimatedRentalUpperValue: convertToNumber(details.estimated_rental_upper_value),
    bathEstimate: convertToNumber(details.bath_estimate),
    bathEstimateDate: new Date(details.bath_estimate_date),
    bedEstimate: convertToNumber(details.bed_estimate),
    bedEstimateDate: new Date(details.bed_estimate_date),
    suburbName: details.suburb_name,
    cityName: details.city_name,
    claimId: details.claim_id,
    claimed: details.claimed,
    userEvents: details.user_events,
    displayEstimatedLowerValue: details.display_estimated_lower_value,
    displayEstimatedUpperValue: details.display_estimated_upper_value,
    displayEstimatedValue: details.display_estimated_value,
    displayEstimatedRentalLowerValue: details.display_estimated_rental_lower_value,
    displayEstimatedRentalUpperValue: details.display_estimated_rental_upper_value,
    buildingSiteCoverage: convertToNumber(details.building_site_coverage),
    massGarageFreestanding: convertToNumber(details.mass_garage_freestanding),
    massGarageUnderRoof: convertToNumber(details.mass_garage_under_roof),
    solar: details.solar,
    capitalValueDigit: details.capital_value_digit,
    improvementValueDigit: details.improvement_value_digit,
    landValueDigit: details.land_value_digit,
    displayCapitalValue: details.display_capital_value,
    displayImprovementValue: details.display_improvement_value,
    displayLandValue: details.display_land_value,
    imageUrls: details.image_urls,
    images: details.images,
    videoUrls: details.video_urls,
    coreLogicId: details.core_logic_id,
  };
}

export const getSchemaPropertyDetailsFromCard = (card: Card): InferInsertModel<typeof propertyDetails> => {
  return {
    id: card.item_id,
    address: card.property_details.address,
    displayAddress: card.property_details.display_address,
    coverImageUrl: card.property_details.cover_image_url,
    coverImageUrlSource: card.property_details.cover_image_url_source,
    listingImages: card.property_details.listing_images,
    googleStreetViewUrl: card.property_details.google_street_view_url,
    numBathrooms: card.property_details.num_bathrooms,
    numBedrooms: card.property_details.num_bedrooms,
    numCarSpaces: card.property_details.num_car_spaces,
    latestBedrooms: card.property_details.latest_bedrooms,
    latestBathrooms: card.property_details.latest_bathrooms,
    latestCarSpaces: card.property_details.latest_car_spaces,
    latestSource: card.property_details.latest_source,
    headline: card.property_details.headline,
    estimatedValueRevisionDate: new Date(card.property_details.estimated_value_revision_date),
    displayEstimatedLowerValueShort: card.property_details.display_estimated_lower_value_short,
    displayEstimatedUpperValueShort: card.property_details.display_estimated_upper_value_short,
    displayEstimatedValueShort: card.property_details.display_estimated_value_short,
    estimatedRentalRevisionDate: new Date(card.property_details.estimated_rental_revision_date),
    displayEstimatedRentalLowerValueShort: card.property_details.display_estimated_rental_lower_value_short,
    displayEstimatedRentalUpperValueShort: card.property_details.display_estimated_rental_upper_value_short,
    estimatedRentalYield: card.property_details.estimated_rental_yield,
    capitalValue: card.property_details.capital_value,
    improvementValue: card.property_details.improvement_value,
    landValue: card.property_details.land_value,
    displayCapitalValueShort: card.property_details.display_capital_value_short,
    displayImprovementValueShort: card.property_details.display_improvement_value_short,
    displayLandValueShort: card.property_details.display_land_value_short,
    currentRevisionDate: new Date(card.property_details.current_revision_date),
    firstGasEnabled: card.property_details.first_gas_enabled,
    flags: card.property_details.flags,
    cityId: card.property_details.city_id,
    suburbId: card.property_details.suburb_id,
    tmSuburbId: card.property_details.tm_suburb_id,
    tmRegionId: card.property_details.tm_region_id,
    tmDistrictId: card.property_details.tm_district_id,
    unitIdentifier: card.property_details.unit_identifier,
    streetNumber: card.property_details.street_number,
    streetAlpha: card.property_details.street_alpha,
    street: card.property_details.street,
    suburb: card.property_details.suburb,
    city: card.property_details.city,
    ta: card.property_details.ta,
  };
}

export const getSchemaBranchesFromCard = (card: Card): InferInsertModel<typeof branches> => {
  return {
    id: card.branches[0].id,
    role: card.branches[0].role,
    bannerUrl: card.branches[0].banner_url,
    branchName: card.branches[0].branch_name,
    brandName: card.branches[0].brand_name,
    bannerBackgroundHexColour: card.branches[0].banner_background_hex_colour,
    logoUrl: card.branches[0].logo_url,
    legalName: card.branches[0].legal_name,
    phone: card.branches[0].phone,
    canonicalUrl: card.branches[0].canonical_url,
    rentalPartnership: card.branches[0].rental_partnership,
    residentialPartnership: card.branches[0].residential_partnership,
    tmId: card.branches[0].tm_id,
    detail: card.branches[0].detail,
    stats: card.branches[0].stats,
  }
    ;
}

export const getSchemaAgentFromCard = (card: Card, branchId: string): InferInsertModel<typeof agents> => {
  return {
    id: card.agent.id,
    name: card.agent.name,
    role: card.agent.role,
    suburbExpert: card.agent.suburb_expert,
    suburbExpertLocation: card.agent.suburb_expert_location,
    profileImageUrl: card.agent.profile_image_url,
    officePhone: card.agent.office_phone,
    mobilePhone: card.agent.mobile_phone,
    branchId: branchId,
    team: card.agent.team,
    canonicalUrl: card.agent.canonical_url,
    detail: card.agent.detail,
    stats: card.agent.stats,
    saleStats: card.agent.sale_stats,
    testimonials: card.agent.testimonials,
    tmMemberId: card.agent.tm_member_id,
  }
}

export const getSchemaCardFromCard = (card: Card, propertyDetailId: string): InferInsertModel<typeof cards> => {
  return {
    id: card.id,
    itemId: card.item_id,
    propertyId: propertyDetailId ? propertyDetailId : null,
    listingId: card.listing_id,
    tmIds: card.tm_ids,
    branchId: card.branch_id ? card.branch_id : null,
    state: card.state,
    salesCount: card.sales_count,
    propertyDetails: card.property_details ? card.property_details : null,
    point: card.point,
    displayPrice: card.display_price,
    price: card.price,
    date: new Date(card.date),
    featuredAt: new Date(card.featured_at),
    featuredPlan: card.featured_plan,
    agentId: card.agent ? card.agent.id : null,
  };
}